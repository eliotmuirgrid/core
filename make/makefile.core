SEARCH  := $(foreach dir, $(DIRS),../$(dir)/*.cpp ../$(dir)/*.c) *.c *.cpp  
DLIST   := $(foreach dir, $(DIRS),../$(dir)/*.obj ../$(dir)/*.o ../$(dir)/*.d) *.obj *.o *.d
SOURCES := $(wildcard $(SEARCH))
OBJECTS := $(patsubst %.cpp,%.o,$(SOURCES))
OBJECTS := $(patsubst %.c,%.o,$(OBJECTS))
DEPENDS := $(subst .o,.d, $(OBJECTS))
TARGET=test

ifdef ComSpec  # ComSpec is just defined for Windows
	RM=del /F /Q
	OBJECTS := $(subst /,\, $(OBJECTS))
   DLIST := $(subst /,\, $(DLIST))
	OBJECTS := $(subst .o,.obj, $(OBJECTS))
	TARGET := test.exe
else # We use ccache on our posix compiles if it is present.
   CFLAGS   := -MMD
   CXXFLAGS := -MMD -fno-exceptions -fno-unwind-tables -fno-asynchronous-unwind-tables -I../ -std=c++11
   CCACHE := $(shell command -v ccache  2> /dev/null)
   ifdef CCACHE
      CC := ccache $(CC)
   endif
endif

all:	$(TARGET)

test.exe:	$(OBJECTS) 
	cl $(OBJECTS) /nologo /link /out:test.exe

test:	$(OBJECTS) $(SOURCES)
	$(CC) $(OBJECTS) -lm -lstdc++ -o test

# Windows build command
%.obj:	%.cpp
	cl  -c $< /Fo$@
%.obj:	%.c
	cl -I../ -c /nologo $< /Fo$@

# Include generated dependency files
-include $(DEPENDS)

info:
	@echo $(CC)
	@echo $(SEARCH)
	@echo $(SOURCES)
	@echo $(OBJECTS)
	@echo $(DEPENDS)
	@echo $(DLIST)

clean:
	-$(RM) $(TARGET) $(DLIST)

